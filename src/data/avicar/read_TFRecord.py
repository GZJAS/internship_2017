"""Read TFRecords for audio data.

The TFRecords can be generated by using `conver_TFRecord.py`.
We get the `dataset` instance and then load data in batches.

Since raw data samples have different lengths we cannot use
batch data load for them. I only load mfcc features and labels
in the `load_batch_avicar` function here.
We should figure out a way to solve this problem.
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import fnmatch
import tensorflow as tf

from data import dataset_utils

slim = tf.contrib.slim


_FILE_PATTERN = 'avicar_%s_*.tfrecord'

_ITEMS_TO_DESCRIPTIONS = {
    'wav': 'Raw data of the audio',
    'mfcc': 'The mfcc data of the audio',
    'label': 'A single integer representing the label',
}


def get_split_avicar(split_name,
                     tfrecord_dir,
                     file_pattern=None,
                     reader=None,
                     num_frames=20):

    if not file_pattern:
        file_pattern = _FILE_PATTERN

    num_samples = 0
    tfrecords_to_count = [
        os.path.join(tfrecord_dir, file)
        for file in os.listdir(tfrecord_dir)
        if fnmatch.fnmatch(file, file_pattern % split_name)]
    for tfrecord_file in tfrecords_to_count:
        for record in tf.python_io.tf_record_iterator(tfrecord_file):
            num_samples += 1

    file_pattern = os.path.join(tfrecord_dir, file_pattern % split_name)

    if reader is None:
        reader = tf.TFRecordReader

    # Create the keys_to_features dictionary for the decoder
    keys_to_features = {
        'audio/wav/data': tf.VarLenFeature(tf.float32),
        'audio/wav/length': tf.FixedLenFeature((), tf.int64),
        'audio/mfcc': tf.FixedLenFeature((26, num_frames), tf.float32),
        'audio/label': tf.FixedLenFeature(
          (), tf.int64, default_value=tf.zeros((), dtype=tf.int64)),
    }

    items_to_handlers = {
        'wav': slim.tfexample_decoder.Tensor(
            'audio/wav/data', shape_keys='audio/wav/length'),
        'mfcc': slim.tfexample_decoder.Tensor(
            'audio/mfcc', shape=(26, num_frames, 1)),
        'label': slim.tfexample_decoder.Tensor('audio/label'),
    }

    decoder = slim.tfexample_decoder.TFExampleDecoder(
        keys_to_features, items_to_handlers)

    labels_to_names = None
    num_classes = None

    if dataset_utils.has_labels(tfrecord_dir):
        labels_to_names = dataset_utils.read_label_file(tfrecord_dir)
        num_classes = len(labels_to_names)

    return slim.dataset.Dataset(
        data_sources=file_pattern,
        reader=reader,
        decoder=decoder,
        num_samples=num_samples,
        items_to_descriptions=_ITEMS_TO_DESCRIPTIONS,
        num_classes=num_classes,
        labels_to_names=labels_to_names)


def load_batch_avicar(dataset,
                      batch_size=32,
                      common_queue_capacity=800,
                      common_queue_min=400,
                      shuffle=True):

    data_provider = slim.dataset_data_provider.DatasetDataProvider(
        dataset, common_queue_capacity=common_queue_capacity,
        common_queue_min=common_queue_min, shuffle=shuffle)
    wav, mfcc, label = data_provider.get(['wav', 'mfcc', 'label'])

    # Batch it up.
    mfccs, labels = tf.train.batch(
        [mfcc, label],
        batch_size=batch_size,
        num_threads=1,
        capacity=2*batch_size)

    return mfccs, labels
