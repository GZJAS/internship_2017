from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from six.moves import xrange

import os
import time

import numpy as np
import tensorflow as tf
from datasets import dataset_utils
from nets import inception_v4
from preprocessing import inception_preprocessing

import data.read_TFRecord as read_TFRecord
from data.load_batch import load_batch


slim = tf.contrib.slim


def get_init_fn(checkpoints_dir, exclude=None):
    """Returns a function run by the chief worker to
       warm-start the training."""
    if exclude is None:
        checkpoint_exclude_scopes = [
            'InceptionV4/Logits', 'InceptionV4/AuxLogits']
    else:
        checkpoint_exclude_scopes = exclude

    exclusions = [scope.strip() for scope in checkpoint_exclude_scopes]

    variables_to_restore = []
    for var in tf.model_variables():
        excluded = False
        for exclusion in exclusions:
            if var.op.name.startswith(exclusion):
                excluded = True
                break
        if not excluded:
            variables_to_restore.append(var)

    if tf.train.checkpoint_exists(checkpoints_dir):
        checkpoint_path = tf.train.latest_checkpoint(checkpoints_dir)
    else:
        checkpoint_path = os.path.join(checkpoints_dir, 'inception_v4.ckpt')

    return slim.assign_from_checkpoint_fn(
        checkpoint_path, variables_to_restore)


def get_variables_to_train(scopes):
    variables_to_train = []
    for scope in scopes:
        variables = tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope)
        variables_to_train.extend(variables)
    return variables_to_train


def train_step(sess, train_op, global_step, metrics_op, *args):

    tensors_to_run = [train_op, global_step, metrics_op]
    tensors_to_run.extend(args)

    start_time = time.time()
    tensor_values = sess.run(tensors_to_run, feed_dict={'testing:0': False})
    time_elapsed = time.time() - start_time

    total_loss = tensor_values[0]
    global_step_count = tensor_values[1]

    tf.logging.info(
        'global step %s: loss: %.4f (%.2f sec/step)',
        global_step_count, total_loss, time_elapsed)

    return tensor_values


# If we use is_training=True, it works during training and when testing we
# also need to use is_training=True and the input must be some mini batch
# containing a certain number of images.
# While is_training=False, when testing it no longer works with
# is_training=True but with is_training=False it works with only one image
# Layers affected: dropout, batch_norm
# Reason: Unknown (maybe should see how batch_norm works)

def fine_tune(dataset_dir,
              checkpoints_dir,
              log_dir,
              number_of_steps=None,
              number_of_epochs=5,
              batch_size=24,
              save_summaries_steps=5,
              do_test=False,
              trainable_scopes=None,
              is_training=False):
    """Fine tune a pre-trained model using customized dataset.

    Args:
        dataset_dir: The directory that contains the tfreocrd files
          (which can be generated by data/convert_TFrecord.py)
        checkpoints_dir: The directory containing the checkpoint of
          the model to use
    """

    if not tf.gfile.Exists(log_dir):
        tf.gfile.MakeDirs(log_dir)

    image_size = 299

    with tf.Graph().as_default():

        tf.logging.set_verbosity(tf.logging.INFO)

        with tf.name_scope('data_provider'):
            dataset = read_TFRecord.get_split('train', dataset_dir)

            # Don't crop images
            images, _, labels = load_batch(
                dataset, height=image_size, width=image_size,
                batch_size=batch_size, is_training=False)

            # Test propose
            dataset_test = read_TFRecord.get_split('validation', dataset_dir)

            images_test, _, labels_test = load_batch(
                dataset_test, height=image_size, width=image_size,
                batch_size=batch_size, is_training=False)

        if number_of_steps is None:
            number_of_steps = np.ceil(
                dataset.num_samples * number_of_epochs / batch_size)

        # Decide if we're testing or not
        testing = tf.placeholder(tf.bool, shape=(), name='testing')
        images = tf.cond(testing, lambda: images_test, lambda: images)
        labels = tf.cond(testing, lambda: labels_test, lambda: labels)

        # Create the model, use the default arg scope to configure the
        # batch norm parameters
        with slim.arg_scope(inception_v4.inception_v4_arg_scope()):
            logits, end_points = inception_v4.inception_v4(
                images, num_classes=dataset.num_classes,
                is_training=is_training)

        # Specify the loss function
        one_hot_labels = tf.one_hot(labels, dataset.num_classes)
        tf.losses.softmax_cross_entropy(one_hot_labels, logits)
        total_loss = tf.losses.get_total_loss()

        # Create the global step for monitoring training
        global_step = tf.train.get_or_create_global_step()

        # Exponentially decaying learning rate
        learning_rate = tf.train.exponential_decay(
            learning_rate=0.005,
            global_step=global_step,
            decay_steps=400,
            decay_rate=0.8, staircase=True)

        # Specify the optimizer and create the train op:
        optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate)

        if trainable_scopes is None:
            trainable_scopes = [
                'InceptionV4/Mixed_7d',
                'InceptionV4/Logits',
                'InceptionV4/AuxLogits']
        variables_to_train = get_variables_to_train(trainable_scopes)

        # print(variables_to_train)
        train_op = slim.learning.create_train_op(
            total_loss, optimizer,
            variables_to_train=variables_to_train)

        # The metrics to predict
        predictions = tf.argmax(end_points['Predictions'], 1)
        accuracy, accuracy_update = tf.metrics.accuracy(predictions, labels)
        accuracy_test = tf.reduce_mean(tf.cast(
            tf.equal(predictions, labels), tf.float32))
        metrics_op = tf.group(accuracy_update)

        # Create some summaries to visualize the training process:
        tf.summary.scalar('learning_rate', learning_rate)
        tf.summary.histogram('logits', logits)
        tf.summary.scalar('losses/total_loss_train', total_loss)
        tf.summary.scalar('accuracy/train', accuracy)
        tf.summary.image('images/train', images, max_outputs=6)
        summary_op = tf.summary.merge_all()

        # Summaries for the test part
        ac_test_summary = tf.summary.scalar('accuracy/test', accuracy_test)
        ls_test_summary = tf.summary.scalar(
            'losses/total_loss_test', total_loss)
        imgs_test_summary = tf.summary.image(
            'images/test', images, max_outputs=6)
        test_summary_op = tf.summary.merge(
            [ac_test_summary, ls_test_summary, imgs_test_summary])

        # Define the supervisor
        sv = tf.train.Supervisor(
            logdir=log_dir, summary_op=None,
            init_fn=get_init_fn(checkpoints_dir))

        with sv.managed_session() as sess:
            for step in xrange(number_of_steps):
                if (step+1) % save_summaries_steps == 0:
                    loss, _, _, summaries, accuracy_rate = train_step(
                        sess, train_op, sv.global_step, metrics_op,
                        summary_op, accuracy)
                    tf.logging.info('Current Streaming Accuracy:%s',
                                    accuracy_rate)
                    sv.summary_computed(sess, summaries)
                    if do_test:
                        ls, acu, summaries_test = sess.run(
                            [total_loss, accuracy_test, test_summary_op],
                            feed_dict={testing: True})
                        tf.logging.info('Current Test Loss: %s', ls)
                        tf.logging.info('Current Test Accuracy: %s', acu)
                        sv.summary_computed(sess, summaries_test)
                else:
                    loss = train_step(
                        sess, train_op, sv.global_step, metrics_op)[0]

            tf.logging.info('Finished training. Final Loss: %s', loss)
            tf.logging.info('Final Accuracy: %s', sess.run(accuracy))
            tf.logging.info('Saving model to disk now.')
            sv.saver.save(sess, sv.save_path, global_step=sv.global_step)


def evaluate(dataset_dir, checkpoints_dir, log_dir, number_of_steps):

    if not tf.gfile.Exists(log_dir):
        tf.gfile.MakeDirs(log_dir)

    image_size = inception_v4.inception_v4.default_image_size

    with tf.Graph().as_default():
        tf.logging.set_verbosity(tf.logging.INFO)

        dataset = read_TFRecord.get_split('validation', dataset_dir)
        images, _, labels = load_batch(
            dataset, height=image_size, width=image_size,
            batch_size=12, is_training=False)

        with slim.arg_scope(inception_v4.inception_v4_arg_scope()):
            logits, endpoints = inception_v4.inception_v4(
                images, num_classes=11, is_training=False)

        predictions = tf.argmax(endpoints['Predictions'], 1)
        accuracy, accuracy_update = tf.metrics.accuracy(predictions, labels)
        metrics_op = tf.group(accuracy_update)

        ac_summary = tf.summary.scalar('accuracy', accuracy)

        global_step = tf.train.get_or_create_global_step()
        global_step_op = tf.assign(global_step, global_step+1)

        fw = tf.summary.FileWriter(log_dir)

        init_fun = get_init_fn(checkpoints_dir, exclude=[])

        def eval_step(sess, metrics_op, global_step_op):
            start_time = time.time()
            _, global_step_count, accuracy_value, acsu, lbs, pds, igs = \
                sess.run([metrics_op, global_step_op, accuracy,
                          ac_summary, labels, predictions, images])
            time_elapsed = time.time() - start_time
            fw.add_summary(acsu, global_step=global_step_count)

            tf.logging.info(
                'global step %s: streaming accurarcy: %.4f (%.2f sec/step)',
                global_step_count, accuracy_value, time_elapsed)

            return accuracy_value, acsu, lbs, pds, igs

        with tf.Session() as sess:
            with slim.queues.QueueRunners(sess):
                sess.run(tf.variables_initializer([global_step]))
                sess.run(tf.local_variables_initializer())
                init_fun(sess)

                for step in xrange(number_of_steps):
                    _, acsu, lbs, pds, igs = eval_step(
                        sess, metrics_op, global_step_op)
                    if step == number_of_steps-1:
                        true_names = [
                            dataset.labels_to_names[i] for i in lbs]
                        predicted_names = [
                            dataset.labels_to_names[i] for i in pds]
                        print('Ground Truth: [%s]' % true_names)
                        print('Prediciotn: [%s]' % predicted_names)
                        with tf.name_scope('last_images'):
                            for i in range(12):
                                ig_pl = tf.placeholder(
                                    dtype=tf.float32,
                                    shape=(1, 299, 299, 3))
                                ig_summary = tf.summary.image(
                                    'image_true_{}_predicted_{}'.format(
                                        true_names[i], predicted_names[i]),
                                    ig_pl)
                                fw.add_summary(
                                    sess.run(ig_summary,
                                             feed_dict={ig_pl: [igs[i]]}))
                        print('finish showing images')


def classify_image(image_path, train_dir, dataset_dir):

    image_size = inception_v4.inception_v4.default_image_size

    with tf.Graph().as_default():

        # dataset = read_TFRecord.get_split('train', dataset_dir)

        """
        # We don't use the given preprocessed funciton that crops images
        processed_images, _, labels = load_batch(
            dataset, height=image_size, width=image_size,
            batch_size=8, is_training=False)
        """
        image_string = tf.gfile.FastGFile(image_path, 'r').read()
        image = tf.image.decode_png(image_string, channels=3)

        processed_image = inception_preprocessing.preprocess_image(
            image, image_size, image_size, is_training=False)
        processed_images = tf.expand_dims(processed_image, 0)

        # Create the model, use the default arg scope to
        # configure the batch norm parameters.
        with slim.arg_scope(inception_v4.inception_v4_arg_scope()):
            logits, endpoints = inception_v4.inception_v4(
                processed_images, num_classes=11, is_training=False)
        probabilities = endpoints['Predictions']

        checkpoint_path = tf.train.latest_checkpoint(train_dir)

        saver = tf.train.Saver(tf.model_variables())
        """
        init_fn = slim.assign_from_checkpoint_fn(
            checkpoint_path,
            slim.get_variables_to_restore())
        """

        with tf.Session() as sess:
            saver.restore(sess, checkpoint_path)

            with slim.queues.QueueRunners(sess):
                imgs = tf.summary.image('processed_image', processed_images)
                # imgs, lbs, probabilities = sess.run(
                #     [imgs, labels, probabilities])
                imgs, probabilities = sess.run([imgs, probabilities])
            # print(lgs, probabilities)
            probabilities = probabilities[0, 0:]
            sorted_inds = [i[0] for i in sorted(
                enumerate(-probabilities), key=lambda x:x[1])]

            # print(lbs)
            # print(np.argmax(probabilities, axis=1))

            # fw = tf.summary.FileWriter('log')
            # fw.add_summary(imgs)

        labels_to_names = dataset_utils.read_label_file(dataset_dir)
        for i in range(5):
            index = sorted_inds[i]
            print('Probability %0.2f%% => [%s]' % (
                  probabilities[index] * 100, labels_to_names[index]))
